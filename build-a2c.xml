<!-- This is the main build file for use with Apache Ant. It tells Ant
     how to compile our application (My.ArXiv) from the source code, 
     how to deploy it, how to build Javadoc documentation, etc.

    To carry out a particular operation with Ant, you provide the name of the
    appropriate target. E.g., to compile the code, you type 

      ant compile

     Some of the other targets are:

     jar : "compile" + create a jar file
     deploy : "jar" + deploy the code to the Tomcat webapps directory
     reload : "deploy" + cause Tomcat to reload the application
     javadoc : "compile" + create Javadoc API documentation
     deploy-javadoc: "javadoc" + deploy docs to the Tomcat webapps directory

     Apache Ant is available for most modern operating systems.
     You can read more about Apache Ant at http://ant.apache.org/manual/index.html

-->

<project name="arxiv-xs" default="jar" basedir=".">

<!-- Property Definitions -->

 <property name="src" location="src"/>
 <property name="build" location="../classes"/>
 <property name="lib" location="../lib"/>
 <!-- Local version of standard tomcat jar files. They don't need
      to be copied to webapps/arxiv/WEB-INF, as Tomcat already will
      have access to them in runtime; however, on cactuar
      we need these local versions during compile time, 
      since Tomcat's own directory is not world-readable.
 -->
 <!-- property name="tomcat.lib.copy" location="../tomcat-lib"/ -->
 <!-- catalina.jar should be moved to this dir from tomcat-lib on
      cactuar and scils
   -->
 <!-- property name="tomcat.lib.copy2" location="../tomcat-lib-to-copy"/ -->
 <!-- A local directory where Java API docs will be put -->
 <property name="arxiv.doc" location="../doc"/>
 <property name="arxiv.api" location="${arxiv.doc}/html/api"/>

 <property name="build.tmp" location="/tmp"/>


<!-- The place where Tomcat lives, on various machines where we run -->
<property name="tomcat.home.tomcat7"  value="/usr/share/tomcat7" />
<property name="tomcat.home.tomcat6"  value="/usr/share/tomcat6" />  
<property name="tomcat.home.rutgers"  value="/www/my-dev.arxiv.rutgers.edu" />
 
<property name="tomcat.home1" value="/usr/local/tomcat"/>

<condition property="tomcat.home2" 
	   value="${tomcat.home.rutgers}" 
	   else="${tomcat.home1}">
  <available file="${tomcat.home.rutgers}"/>
</condition>


<condition property="tomcat.home3" 
	   value="${tomcat.home.tomcat6}" 
	   else="${tomcat.home2}">
  <available file="${tomcat.home.tomcat6}"/>
</condition>

<condition property="tomcat.home" 
	   value="${tomcat.home.tomcat7}" 
	   else="${tomcat.home3}">
  <available file="${tomcat.home.tomcat7}"/>
</condition>


<echo message="tomcat.home=${tomcat.home}"/>

<!-- the location of files that will appear at the "root" of our
     website (regardless of whether it's localhost or
     my.arxiv.org) -->
<condition property="tomcat.deploy.docs" value="${tomcat.home}/htdocs" else="${tomcat.home}/webapps/ROOT">
  <available file="${tomcat.home.rutgers}"/>
</condition>

<property name="app.name"       value="arxiv"/>
<!-- <property name="app.name"       value="arxiv.laurent"/> --> 
<!-- property name="app.name"       value="arxiv.tmp"/ -->
<property name="deploy.home"    value="${tomcat.home}/webapps/${app.name}"/>
<property name="dist.home"      value="${deploy.home}"/>
<property name="dist.src"       value="${app.name}.jar"/>
<property name="dist.war"       value="${app.name}.war"/>
<property name="javadoc.home"   value="${deploy.home}/javadoc"/>
<!-- property name="javadoc.home"   value="webroot/javadoc"/ -->


<!-- Tomcat libraries; Tomncat 5.5 at Rutgers, Tomcat 6.* or 7.* elsewhere -->
<property name="tomcat.lib.rutgers"     value="/usr/local/tomcat55/common/lib"/>

<condition property="tomcat.lib" value="${tomcat.lib.rutgers}" else="${tomcat.home}/lib">
  <available file="${tomcat.lib.rutgers}"/>
</condition>


<echo message="tomcat.lib=${tomcat.lib}"/>

<echo message="tomcat.lib=${tomcat.lib}"/>


<!-- Our web application's library directory and classes directory -->
<property name="deploy.lib"      value="${deploy.home}/WEB-INF/lib" />

<!-- where to look for OpenJPA, at home and on scils -->
<condition property="openjpa" 
	   value="/usr/local/apache-openjpa-2.1.1"
	   else="${user.home}/apache-openjpa-2.1.1" >
  <available file="/usr/local/apache-openjpa-2.1.1"/>
</condition>


<path id="classpath"
       description="The classpath to use for compiling and running AXS">
   <!-- fileset file="../lucene/lucene-3.3.0/lucene-core-3.3.0.jar"/ -->

   <fileset dir="${tomcat.lib}">
     <include name="catalina.jar"/>
     <include name="servlet-api.jar"/>

     <include name="catalina-ant.jar"/>
     <include name="tomcat-coyote.jar"/>
     <include name="tomcat-util.jar"/>
     <include name="jsp-api.jar"/>
     <include name="tomcat-api.jar"/>
   </fileset>

   <fileset dir="${lib}">  <!-- from the lib directory, take all third-party JAR files, but not our axs.jar -->
     <include name="*.jar"/>
     <exclude name="axs.jar"/>
   </fileset>
 </path>

 <echo message="Path = ${toString:classpath}"/>


<!-- An auxiliary target; you aren't likely to use it directly.  It just creates necessary directories -->
<target name="init">
    <!-- Create the time stamp -->
    <tstamp/>
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${lib}"/>
    <mkdir dir="${build}"/>
    <mkdir dir="${build}/META-INF"/>

 </target>


<!-- This target tells Ant how to compile AXS. We used to have the argument 
     target="1.5"
in the javac command, to make it easier for people elsewhere to use our
code; but not anymore. -->
<target name="compile" depends="init"
        description="Compile the source" >
  <!-- Compile the java code from ${src} into ${build} -->
  <javac srcdir="${src}" destdir="${build}"
	 includes="edu/**,org/**"  optimize="on"
	 target="1.5"
	 debug="on" debuglevel="lines,vars,source"
	 includeantruntime="false" >
    <compilerarg value="-Xlint:unchecked"/>
    <classpath refid="classpath"/>
  </javac>

</target>

<!-- ====================================================
Building a JAR file
-->
<target name="jar" depends="compile" description="Builds a Jar file">
  <jar destfile="${lib}/axs.jar"   basedir="${build}"/>
</target>

<!-- Deletes the class directory -->
<target name="clean">
  <delete dir="${build}"/>
</target>

</project>


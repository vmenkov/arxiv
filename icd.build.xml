<?xml version="1.0" encoding="UTF-8"?>
<!--
 Licensed to the Apache Software Foundation (ASF) under one
 or more contributor license agreements.  See the NOTICE file
 distributed with this work for additional information
 regarding copyright ownership.  The ASF licenses this file
 to you under the Apache License, Version 2.0 (the
 "License"); you may not use this file except in compliance
 with the License.  You may obtain a copy of the License at
 
 http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an
 "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 KIND, either express or implied.  See the License for the
 specific language governing permissions and limitations
 under the License.   
-->
<project default="deploy">

  <!-- web things -->
 
  <property name="tomcat.home.rutgers"  value="/www/icd.rutgers.edu" />
 
  <condition property="tomcat.home" value="${tomcat.home.rutgers}" else="/usr/local/tomcat">
    <available file="${tomcat.home.rutgers}"/>
  </condition>
  
  <!-- the location of files that will appear at the "root" of our
  website (regardless of whether it's localhost or  icd.rutgers.edu) -->
  <condition property="tomcat.deploy.docs" value="${tomcat.home}/htdocs" else="${tomcat.home}/webapps/ROOT">
  <available file="${tomcat.home.rutgers}"/>
  </condition>

  <property name="app.name"       value="icd"/>
  <!-- property name="app.name"       value="test"/ -->

  <property name="deploy.home"    value="${tomcat.home}/webapps/${app.name}"/>
  <property name="dist.home"      value="${deploy.home}"/>
  <property name="dist.src"       value="${app.name}.jar"/>
  <property name="dist.war"       value="${app.name}.war"/>
  <property name="javadoc.home"   value="${deploy.home}/javadoc"/>
  <!-- property name="javadoc.home"   value="webroot/javadoc"/ -->
 
  <!-- The directory for temporary files (used during installation) -->
  <property name="tmp"   value="/tmp" />

  <!-- Tomcat libraries; for Tomcat 6.* -->
<!-- <property name="tomcat.lib"     value="/usr/local/tomcat/lib"/> -->

  <property name="tomcat55"     value="/usr/local/tomcat55"/>

  <!--
  <condition property="tomcat.lib" value="${tomcat.lib.rutgers}" else="/usr/local/tomcat/lib">
  <available file="${tomcat.lib.rutgers}" property="tomcat.lib" value="${tomcat.lib.rutgers}"/>
  </condition>
-->

  <condition property="tomcat.lib" value="${tomcat55}/common/lib" else="/usr/local/tomcat/lib">
    <available file="${tomcat55}"/>
  </condition>

  <condition property="tomcat.server.lib" value="${tomcat55}/server/lib" else="${tomcat.lib}">
    <available file="${tomcat55}" />
  </condition>



  <!-- Our web application's library directory and classes directory -->
  <property name="deploy.lib"      value="${deploy.home}/WEB-INF/lib" />
  <!-- property name="deploy.classes"  value="${deploy.home}/WEB-INF/classes" / -->

  <!-- end of web things -->

    <property name="parent" value="${basedir}/.."/>

    <!-- property name="openjpa" value="/usr/local/apache-openjpa-1.2.2"/ -->

    <!-- where to look for OpenJPA, at home and on scils -->
    <condition property="openjpa" value="/mnt/tb/scilsdata/raid/users/u7/vmenkov/apache-openjpa-1.2.2" else="/usr/local/apache-openjpa-1.2.2">
      <available file="${tomcat.home.rutgers}"/>
    </condition>


    <property name="local.classes"  value="classes" />


    <!-- database connection properties -->
    <property name="dbdriver" value="org.apache.derby.jdbc.EmbeddedDriver"/>
    <!-- property name="dburl"
        value="jdbc:derby:${basedir}/${example}-database;create=true"/ -->
    <property name="dburl"
        value="jdbc:derby:${basedir}/icd-database;create=true"/>
    <property name="dbuser" value=""/>
    <property name="dbpass" value=""/>


    <target name="usagewarning">
        <fail>
Please traverse to a sub-directory and run "ant" from there.
        </fail>
    </target>

    <path id="classpath"
        description="The classpath to use for compiling and running">
        <pathelement path="${local.classes}"/>
        <pathelement path="${parent}"/>
        <fileset dir="${openjpa}">
            <include name="**/*.jar"/>
        </fileset>
        <fileset dir="${tomcat.lib}">
          <include name="servlet-api.jar"/>
          <include name="jsp-api.jar"/>
	  <!-- 5.0.5 at home, 3.1.13 on scils -->
	  <!--
          <include name="mysql-connector-java-5.0.5.jar"/>
          <include name="mysql-connector-java-3.1.13-bin.jar"/>
	  -->
          <include name="mysql-connector-java-*.jar"/>
        </fileset>
	<!-- on scils, some tomcat libs are elsewhere -->
	<fileset dir="${tomcat.server.lib}">
          <include name="catalina.jar"/>
        </fileset>

<!--  ../lib/catalina.jar:tomcat-juli.jar -->
    </path>

    <!-- classpath to use on a machine with deployed code only -->
    <path id="classpath.deployed"
        description="The classpath to use so that deployed classes will get used">
        <!-- fileset dir="${openjpa}">
            <include name="**/*.jar"/>
        </fileset -->
        <fileset dir="${deploy.lib}">
	  <include name="*.jar"/>
        </fileset>
        <fileset dir="${tomcat.lib}">
          <include name="servlet-api.jar"/>
          <include name="jsp-api.jar"/>
          <include name="mysql-connector-java-*.jar"/>
        </fileset>
	<!-- on scils, some tomcat libs are elsewhere -->
	<fileset dir="${tomcat.server.lib}">
          <include name="catalina.jar"/>
        </fileset>
    </path>


    <path id="javaagent">
        <fileset dir="${openjpa}">
            <include name="openjpa-*.jar"/>
        </fileset>
    </path>
    <pathconvert property="javaagent" refid="javaagent"/>

    <target name="clean" depends="pre-clean"
        description="Clean up compiled files and generated database files">

	<delete dir="${deploy.home}"/>
	<delete dir="${local.classes}"/>

      <delete file="lib/icd.jar"/>
      <delete includeemptydirs="yes">
        <fileset dir="${basedir}">
          <include name="*.class"/>
          <include name="*.log"/>
          <include name="${example}-database/**/*"/>
          <include name="${example}-database"/>
        </fileset>
      </delete>
    </target>

    <!-- this target can be overridden by the sub-build. -->
    <target name="pre-clean" description="Pre-clean phase">
    </target>

    <!-- We can add the attrib	 target="1.5" to the javac element if needed. 
      -->
    <target name="compile" depends="prepare"
        description="Compile the example java files">
      <echo>    Compiling Java files from src to ${local.classes}</echo>
      <javac srcdir="src"  destdir="${local.classes}" classpathref="classpath"
           debug="yes"/>

      <copy  file="META-INF/persistence.xml" todir="${local.classes}/META-INF"/>

      <!-- copy todir="${local.classes}/META-INF">
	<fileset dir="META-INF"/>    
      </copy -->
 
      <echo>    Building a jar file  </echo>
      <jar destfile="lib/icd.jar"   basedir="${local.classes}"  />

    </target>

    <target name="run" depends="compile"
        description="Run the example Main program">

        <java classname="edu.rutgers.comminfo.icd.Main" 
	      classpathref="classpath" fork="yes"   failonerror="yes">
            <!--
                Specifying the openjpa jar as the javaagent argument is
                necessary in order for automatic class-enhancement to work.
            -->
            <jvmarg value="-javaagent:${javaagent}"/>

            <!--
                Specify the system properties to use when configuring
                OpenJPA. Note that these will only be used becuase in the
                examples, the call to "Persistence.createEntityManagerFactory"
                is passed "System.getProperties()".
            -->

            <!--
                By default, use the stand-alone Derby database (provided).
                This can easily be changes to use your own database's driver,
                provided you ensure it is accessible in the classpath.
            -->
<!--
            <sysproperty key="openjpa.ConnectionDriverName"
                value="${dbdriver}"/>
            <sysproperty key="openjpa.ConnectionURL" value="${dburl}"/>
            <sysproperty key="openjpa.ConnectionUserName" value="${dbuser}"/>
            <sysproperty key="openjpa.ConnectionPassword" value="${dbpass}"/>
-->
            <!--
                Tell OpenJPA to automatically create tables in the database
                for entities. Note that this should be disabled when
                running against a production database, since you probably
                don't want to be altering the schema at runtime.
            -->
<!--
            <sysproperty key="openjpa.jdbc.SynchronizeMappings"
                value="buildSchema"/>
-->
            <!--
                Output all the SQL for educational purposes, but set the
                general logging level to only show warnings.
            -->
<!--
            <sysproperty key="openjpa.Log"
                value="DefaultLevel=WARN,SQL=TRACE"/>
-->?
        </java>
    </target>

    <target name="run-show" depends="compile"
        description="Run the ShowAnnotations program">

        <java classname="ShowAnnotations" 
	      classpathref="classpath" fork="yes"   failonerror="yes">
	  <arg value="edu.rutgers.comminfo.icd.Respondent"/>
	</java>
    </target>


    <target name="run-export" depends="compile" description="Export tables">
        <java classname="edu.rutgers.comminfo.icd.Export"
	      classpathref="classpath" fork="yes"   failonerror="yes">
<!--
            <sysproperty key="openjpa.ConnectionDriverName"
                value="${dbdriver}"/>
            <sysproperty key="openjpa.ConnectionURL" value="${dburl}"/>
            <sysproperty key="openjpa.ConnectionUserName" value="${dbuser}"/>
            <sysproperty key="openjpa.ConnectionPassword" value="${dbpass}"/>

            <sysproperty key="openjpa.jdbc.SynchronizeMappings"
                value="buildSchema"/>
            <sysproperty key="openjpa.Log"
                value="DefaultLevel=WARN,SQL=TRACE"/>
-->
	</java>
    </target>

    <target name="run-create-roles" depends="compile" description="Creates any missing roles in the role table">
        <java classname="edu.rutgers.comminfo.icd.CreateRoles"
	      classpathref="classpath" fork="yes"   failonerror="yes">
	</java>
    </target>

    <target name="run-test-edit" depends="compile" description="test AddRespondent">
        <java classname="edu.rutgers.comminfo.icd.web.AddRespondent"
	      classpathref="classpath" fork="yes"   failonerror="yes">
	  <arg line="53"/>
	</java>
    </target>

    <target name="run-import" description="CSV import, assuming code already deployed">
        <java classname="edu.rutgers.comminfo.icd.ImportCSV"
	      classpathref="classpath.deployed" fork="yes"   failonerror="yes">
	  <arg line="input.csv"/>
          <sysproperty key="openjpa.Log"
                value="DefaultLevel=WARN"/>
	</java>
    </target>

    <target name="run-import-local" depends="compile" description="CSV import">
        <java classname="edu.rutgers.comminfo.icd.ImportCSV"
	      classpathref="classpath" fork="yes"   failonerror="yes">
	  <arg line="input.csv"/>
          <sysproperty key="openjpa.Log"
                value="DefaultLevel=WARN"/>
	</java>
    </target>

    <target name="prepare">
      <mkdir  dir="${local.classes}"/>
      <mkdir  dir="${deploy.home}"/>
      <mkdir  dir="${deploy.home}/WEB-INF"/>
      <mkdir  dir="${deploy.home}/META-INF"/>
      <!-- mkdir  dir="${deploy.classes}"/ -->
      <!-- copy  file="etc/pages.sh" todir="${deploy.classes}"/ -->
      <mkdir  dir="${deploy.lib}"/>
      <mkdir  dir="${javadoc.home}"/>
    </target>


    <!-- deploy the web application -->
    <target name="deploy"  depends="prepare,compile">
      <copy todir="${deploy.home}/WEB-INF">
	<fileset dir="etc"/>
      </copy>
      <copy  file="META-INF/context.xml" todir="${deploy.home}/META-INF"/>
      <!-- copy todir="${deploy.home}/META-INF">
	<fileset dir="META-INF"/>
      </copy -->
      <copy todir="${deploy.lib}">
        <fileset dir="${openjpa}">    <include name="*.jar"/> </fileset>
        <fileset dir="${openjpa}/lib"> <include name="*.jar"/> </fileset>
	<fileset dir="lib"><include name="*.jar"/></fileset>

        <!-- this appears to be needed at least on scils, for the RealmBase class. 2010-06-17 --> 
	<fileset dir="${tomcat.server.lib}"><include name="catalina.jar"/> </fileset>

      </copy>
      
      <echo message="Copying files from web/ to ${deploy.home}" />
      <copy todir="${deploy.home}">
	<fileset dir="web" excludes=".svn" />
      </copy>

      <echo message="Copying files from webroot/ to ${tomcat.deploy.docs}" />
      <copy todir="${tomcat.deploy.docs}">
	<fileset dir="webroot" excludes=".svn" />
      </copy>
    </target>

    <!-- only copies JSP files -->
    <target name="deploy-jsp">     
      <echo message="Copying files from web/ to ${deploy.home}" />
      <copy todir="${deploy.home}">
	<fileset dir="web" excludes=".svn" />
      </copy>
    </target>



<property name="reloadclass.correct" value="org.apache.catalina.ant.ReloadTask"/>

<condition property="reloadclass" value="${reloadclass.correct}" else="">
  <available classname="${reloadclass.correct}"/>
</condition>

<property name="url" value="http://localhost:8080/manager"/>
<taskdef name="reload"    classname="${reloadclass}"/>
  
<target name="reload" description="Reload web application on localhost"
        depends="deploy">
  <reload url="${url}" username="vmenkov" password="tomcat" path="/${app.name}"/>
</target>


<target name="javadoc" depends="prepare">
<!--
  <exec executable="grep" outputproperty="dndo.ver">
    <arg line="version src/dd/engine/Main.java"/>
    <redirector >
      <outputfilterchain >
	<replaceregex pattern="[^0-9\. \-]" replace="" flags="g"/>
      </outputfilterchain>
    </redirector>
  </exec>
 -->
<!--	   Package="true" -->
  <javadoc sourcepath="src" packagenames="edu.*"
	   classpathref="classpath"
	   destdir="${javadoc.home}"
           use="true"
	   link="http://java.sun.com/j2se/1.5.0/docs/api/"
	   header="&lt;em&gt;ICD Survey Tool &lt;/em&gt;"   
	   windowtitle="ICD Survey Tool API" 
	   overview="overview.html"/>

</target>


</project>


package edu.rutgers.axs.sb;

import java.io.*;
import java.util.*;
import java.text.*;
import java.util.regex.*;

import javax.persistence.*;

import org.apache.lucene.document.*;
import org.apache.lucene.index.*;
import org.apache.lucene.search.IndexSearcher;

import edu.rutgers.axs.sql.*;
import edu.rutgers.axs.web.*;
import edu.rutgers.axs.indexer.Common;

class SBRGThread extends Thread {
    private final SBRGenerator parent;
    //    private final long sid;
    /** Creates a thread. You must call its start() next */
    SBRGThread(SBRGenerator _parent) {
	parent = _parent;
    }

    /** The number of actions 
     */
    int actionCount=0;

    /** The main class for the actual generation */
    public void run()  {
	// get the list of article id, using whatever algorithm
	computeRecList();

	try {
	    // add article title etc to each entry
	    IndexReader reader=Common.newReader();
	    IndexSearcher searcher = new IndexSearcher( reader );
	    for(ArticleEntry ae: sr.entries) {
		ae.populateOtherFields(searcher);
	    }
	    searcher.close();
	    reader.close();
	} catch(IOException ex) {
	    error = true;
	    errmsg = ex.getMessage();
	    //sr = null;
	}	    

	parent.completeRun();
    }

    /** The reommendation list generated by this method */
    public SearchResults sr=null;
    //    PresentedList pl;

    boolean error = false;
    String errmsg = "";
    
    private void computeRecList() {
	EntityManager em=null;
	try {
	    em = parent.sd.getEM();       
	    Vector<Action> va = Action.actionsForSession( em, parent.sd.getSqlSessionId());
	    actionCount = va.size();
	    Vector<String> viewedArticles = new Vector<String>();
	    HashSet<String> h = new HashSet<String>();
	    for(Action a: va) {
		Article art = a.getArticle();
		String aid = art.getAid();
		if (!h.contains(aid)) {
		    viewedArticles.add(aid);
		    h.add(aid);
		}
	    }

	    // trivial list: out=in
	    Vector<ArticleEntry> entries = new Vector<ArticleEntry>();
	    int k=0;
	    for(String aid:  viewedArticles) {
		ArticleEntry ae = new ArticleEntry(++k, aid);
		ae.setScore(1.0);
		entries.add(ae);
	    }
	    sr = new SearchResults(entries); 
	    //sr.saveAsPresentedList(em,Action.Source.SB,null,null, null);
	}  catch (Exception _e) {
	    error = true;
	    errmsg = _e.getMessage();
	    Logging.error(""+_e);
	    //   setEx(_e);
	} finally {
	    ResultsBase.ensureClosed( em, true);
	    //em.close(); 
	}
 
    }

    /*
  PresentedList saveAsPresentedList(EntityManager em, User u) {
	PresentedList plist = new PresentedList(Action.Source.SB, u);
	plist.fillArticleList(entries);	
	em.getTransaction().begin();
	em.persist(plist);
	em.getTransaction().commit();
	return plist;
    }
    */

}

